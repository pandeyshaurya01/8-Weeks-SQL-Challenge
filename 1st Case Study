
create database diner;
use diner;
CREATE TABLE sales (
  customer_id VARCHAR(1),
   order_date DATE,
  product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
  select * from sales;
  select * from members;
  select * from menu;
  
  1. What is the total amount each customer spent at the restaurant?
  select s.customer_id , sum(m.price)
  from sales as s
  join menu as m
  on s.product_id=m.product_id
  group by s.customer_id;  
  
  2. How many days has each customer visited the restaurant?
  
  select customer_id , count(distinct order_date)
  from sales
  group by customer_id;
  
  3. What was the first item from the menu purchased by each customer?
  
  with final as (
  select s.*,m.product_name,
  rank() over (partition by customer_id order by order_date) as ranking
  from
  sales as s
  join
  menu as m
  on s.product_id=m.product_id)
 Select * 
from final 
  where ranking=1
  ;
  
  4. What is the most purchased item on the menu and how many times was it purchased by all customers?
  select
  m.product_name, count(*)
  from
  sales as s
  join
  menu as m
  on s.product_id=m.product_id 
  group by m.product_name; ____how many times was it purchased by all customers?
  
  select
  m.product_name, count(*)
  from
  sales as s
  join
  menu as m
  on s.product_id=m.product_id 
  group by m.product_name
  order by count(*) desc
  limit 1;  _____What is the most purchased item on the menu?
  
  5. Which item was the most popular for each customer?
  with final as(
  select
  s.customer_id,m.product_name, count(*) as total
  from
  sales as s
  join
  menu as m
  on s.product_id=m.product_id 
  group by s.customer_id, m.product_name),
  loss as(
  select customer_id,product_name,total,
  row_number() over (partition by customer_id order by total desc) as ranking
  from final)
  select customer_id,product_name,total
  from loss
  where ranking =1;
  
  6. Which item was purchased first by the customer after they became a member?
  with final as(
  select s.*,m.customer_id,m.join_date,
  rank() over (partition by s.customer_id order by order_date) as ranking,
  me.product_name
  from sales as s
  join
  members as m
  on s.customer_id=m.customer_id
  join
  menu as me
  on s.product_id=me.product_id
  where s.order_date>=m.join_date)
  select customer_id,
  ranking,
  product_name
  from final
  where ranking=1;
  
  7. Which item was purchased just before the customer became a member?
   with final as(
  select s.*,m.customer_id as customer_id,m.join_date,
  rank() over (partition by s.customer_id order by order_date) as ranking,
  me.product_name
  from sales as s
  join
  members as m
  on s.customer_id=m.customer_id
  join
  menu as me
  on s.product_id=me.product_id
  where s.order_date<m.join_date)
  select customer_id,
  ranking,
  product_name
  from final
  where ranking=1;
  
  8. What is the total items and amount spent for each member before they became a member?
  with final as(
  select s.customer_id , s.order_date , m.join_date , me.price , me.product_name
  from sales as s
  join
  members as m
  on s.customer_id = m.customer_id 
  join
  menu as me
  on s.product_id=me.product_id
  where s.order_date < m.join_date)
  select customer_id , sum(price) , count(distinct product_name)
  from final
  group by customer_id;
  
  9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
  with final as(
  select s.customer_id , s.order_date , me.product_name ,  me.price
  case when product_name='sushi' then 2*(me.price)
  else me.price end as newprice
  from 
  sales as s
  join
  menu as me
  on s.product_id=me.product_id)
  select customer_id , sum(newprice)*10 
  from final
  group by customer_id;
  
  10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
  with final as(
  select s.customer_id , s.order_date , me.product_name , me.price , 
  case when product_name='sushi' then 2*me.price
	   when s.order_date between m.join_date and (m.join_date + interval 6 day) then 2*me.price
       else me.price end as newprice
	from
    sales as s
    join
    menu as me
    on s.product_id=me.product_id
    join
    members as m
    on s.customer_id = m.customer_id)
    select customer_id , sum(newprice)*10 
  from final
  group by customer_id;
  
  11. The following questions are related creating basic data tables that Danny and his team can use to quickly derive insights without needing to join the underlying tables using SQL.
   
   select s.customer_id , s.order_date , me.product_name , me.price,
   case when s.order_date < m.join_date then'N'
        when m.join_date is Null then 'N'
        else 'Y' end as member
	from sales as s
    join
    menu as me
    on s.product_id=me.product_id
	left join
    members as m
    on s.customer_id=m.customer_id;
   
   12. Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.
   with ranking as(
  select s.customer_id , s.order_date , me.product_name , me.price,
   case when s.order_date < m.join_date then'N'
        when m.join_date is Null then 'N'
        else 'Y' end as member
	from sales as s
    join
    menu as me
    on s.product_id=me.product_id
	left join
    members as m
    on s.customer_id=m.customer_id)
    select * ,
    case when member='N' then null
    else
    rank() over (partition by customer_id,member order by order_date) end as rankcalc
    from ranking;
  
